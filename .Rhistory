lost_players <- subset(lost_players, yearID==2001)
lost_players
lost_players <- lost_players %>% select(playerID,H,X2B,X3B,HR,OBP,SLG,BA,AB)
lost_players
# Okay, let's get a subset for 2001, and see what the salaries are
combo2001 <- subset(combo, yearID==2001)
head(combo2001)
# let's inspect the data to get an idea of the max and min salaries, AB and OBP
summary(combo2001)
# min salary is 200000
# since the total salary cap is 15 million, and the lowest salary is 200K, the maximum salary of any one replacement player must be 14.6 million or less (that is, one player could get 14.6 million and the other 2 players each get 200K, adding to 15 million)
# combined AB must be greater than (644+520+305)
minCombinedAB <- 644+520+305
minCombinedAB #1649
# min AB is 0.0
# max AB is 692.0
# Since the maximum is 692, we can work out the minimum required. Let's say two of the replacements have a score of 692. That's a combined 1384. 1649-1384=265.
# combined OBP must be greater than 0.3235294+0.4769001+0.2911765
minCombinedOBP <- 0.3235294+0.4769001+0.2911765
minCombinedOBP # 1.091606
# min OBP is 0.000
# max OBP is 1.000
# It's possible that two of the players have an OBP of 1.0000, which means that the minimum would be 0.0000. Hence, there's no point in putting any filters on for this.
# let's create a new subset with our information about salary and AB requirements
combo2001 <- subset(combo2001, salary <= 14600000, AB>=265)
nrow(combo2001)
# let's create a new subset with our information about salary and AB requirements
combo2001 <- subset(combo2001, salary <= 14600000, AB>=265)
library(readr)
library(dplyr)
batting <- read.csv('Training Exercises/Capstone and Data Viz Projects/Capstone Project/Batting.csv')
nrow(batting)
str(batting)
colnames(batting)
head(batting)
head(batting$AB, 5)
head(batting$X2B)
batting <- batting %>% mutate(BA=H/AB)
tail(batting$BA, 5)
batting <- batting %>% mutate(OBP=(H+BB+HBP)/(AB+BB+HBP+SF))
tail(batting$OBP,5)
# calculate 1B
batting <- batting %>% mutate(SLG=((H-X2B-X3B-HR)+(2*X2B)+(3*X3B)+(4 * HR)/AB))
tail(batting$SLG,5)
str(batting)
sal <- read.csv('Training Exercises/Capstone and Data Viz Projects/Capstone Project/Salaries.csv')
head(sal)
str(sal)
summary(sal)
combo <- merge(batting, sal, by = c('playerID','yearID'))
head(combo)
summary(combo)
lost_IDs <- c('giambja01', 'damonjo01', 'saenzol01')
lost_players <- subset(combo, playerID %in% lost_IDs)
lost_players
lost_players <- subset(lost_players, yearID==2001)
lost_players
lost_players <- lost_players %>% select(playerID,H,X2B,X3B,HR,OBP,SLG,BA,AB)
lost_players
# Okay, let's get a subset for 2001, and see what the salaries are
combo2001 <- subset(combo, yearID==2001)
head(combo2001)
# let's inspect the data to get an idea of the max and min salaries, AB and OBP
summary(combo2001)
# min salary is 200000
# since the total salary cap is 15 million, and the lowest salary is 200K, the maximum salary of any one replacement player must be 14.6 million or less (that is, one player could get 14.6 million and the other 2 players each get 200K, adding to 15 million)
# combined AB must be greater than (644+520+305)
minCombinedAB <- 644+520+305
minCombinedAB #1649
# min AB is 0.0
# max AB is 692.0
# Since the maximum is 692, we can work out the minimum required. Let's say two of the replacements have a score of 692. That's a combined 1384. 1649-1384=265.
# combined OBP must be greater than 0.3235294+0.4769001+0.2911765
minCombinedOBP <- 0.3235294+0.4769001+0.2911765
minCombinedOBP # 1.091606
# min OBP is 0.000
# max OBP is 1.000
# It's possible that two of the players have an OBP of 1.0000, which means that the minimum would be 0.0000. Hence, there's no point in putting any filters on for this.
# let's create a new subset with our information about salary and AB requirements
combo2001 <- subset(combo2001, salary <= 14600000, AB>=265)
nrow(combo2001) # we've narrowed our search to 913 players. The next step is to pick one of the variables and get the best score for that variable. Let's pick AB.
summary(combo2001)
summary(combo2001)
library(readr)
library(dplyr)
batting <- read.csv('Training Exercises/Capstone and Data Viz Projects/Capstone Project/Batting.csv')
nrow(batting)
str(batting)
colnames(batting)
head(batting)
head(batting$AB, 5)
head(batting$X2B)
batting <- batting %>% mutate(BA=H/AB)
tail(batting$BA, 5)
batting <- batting %>% mutate(OBP=(H+BB+HBP)/(AB+BB+HBP+SF))
tail(batting$OBP,5)
# calculate 1B
batting <- batting %>% mutate(SLG=((H-X2B-X3B-HR)+(2*X2B)+(3*X3B)+(4 * HR)/AB))
tail(batting$SLG,5)
str(batting)
sal <- read.csv('Training Exercises/Capstone and Data Viz Projects/Capstone Project/Salaries.csv')
head(sal)
str(sal)
summary(sal)
combo <- merge(batting, sal, by = c('playerID','yearID'))
head(combo)
summary(combo)
lost_IDs <- c('giambja01', 'damonjo01', 'saenzol01')
lost_players <- subset(combo, playerID %in% lost_IDs)
lost_players
lost_players <- subset(lost_players, yearID==2001)
lost_players
lost_players <- lost_players %>% select(playerID,H,X2B,X3B,HR,OBP,SLG,BA,AB)
lost_players
# Okay, let's get a subset for 2001, and see what the salaries are
combo2001 <- subset(combo, yearID==2001)
head(combo2001)
# let's inspect the data to get an idea of the max and min salaries, AB and OBP
summary(combo2001)
# min salary is 200000
# since the total salary cap is 15 million, and the lowest salary is 200K, the maximum salary of any one replacement player must be 14.6 million or less (that is, one player could get 14.6 million and the other 2 players each get 200K, adding to 15 million)
# combined AB must be greater than (644+520+305)
minCombinedAB <- 644+520+305
minCombinedAB #1649
# min AB is 0.0
# max AB is 692.0
# Since the maximum is 692, we can work out the minimum required. Let's say two of the replacements have a score of 692. That's a combined 1384. 1649-1384=265.
# combined OBP must be greater than 0.3235294+0.4769001+0.2911765
minCombinedOBP <- 0.3235294+0.4769001+0.2911765
minCombinedOBP # 1.091606
# min OBP is 0.000
# max OBP is 1.000
# It's possible that two of the players have an OBP of 1.0000, which means that the minimum would be 0.0000. Hence, there's no point in putting any filters on for this.
# let's create a new subset with our information about salary and AB requirements
combo2001 <- subset(combo2001, salary <= 14600000, AB>=265)
nrow(combo2001) # we've narrowed our search to 913 players. The next step is to pick one of the variables and get the best score for that variable. Let's pick AB.
summary(combo2001)
class(combo2001)
nrow(combo2001)
summary(combo2001)
str(combo2001)
head(combo2001)
# let's create a new subset with our information about salary and AB requirements
combo2001 <- subset(combo2001, salary <= 14600000)
library(readr)
library(dplyr)
batting <- read.csv('Training Exercises/Capstone and Data Viz Projects/Capstone Project/Batting.csv')
nrow(batting)
str(batting)
colnames(batting)
head(batting)
head(batting$AB, 5)
head(batting$X2B)
batting <- batting %>% mutate(BA=H/AB)
tail(batting$BA, 5)
batting <- batting %>% mutate(OBP=(H+BB+HBP)/(AB+BB+HBP+SF))
tail(batting$OBP,5)
# calculate 1B
batting <- batting %>% mutate(SLG=((H-X2B-X3B-HR)+(2*X2B)+(3*X3B)+(4 * HR)/AB))
tail(batting$SLG,5)
str(batting)
sal <- read.csv('Training Exercises/Capstone and Data Viz Projects/Capstone Project/Salaries.csv')
head(sal)
str(sal)
summary(sal)
combo <- merge(batting, sal, by = c('playerID','yearID'))
head(combo)
summary(combo)
lost_IDs <- c('giambja01', 'damonjo01', 'saenzol01')
lost_players <- subset(combo, playerID %in% lost_IDs)
lost_players
lost_players <- subset(lost_players, yearID==2001)
lost_players
lost_players <- lost_players %>% select(playerID,H,X2B,X3B,HR,OBP,SLG,BA,AB)
lost_players
# Okay, let's get a subset for 2001, and see what the salaries are
combo2001 <- subset(combo, yearID==2001)
head(combo2001)
# let's inspect the data to get an idea of the max and min salaries, AB and OBP
summary(combo2001)
# min salary is 200000
# since the total salary cap is 15 million, and the lowest salary is 200K, the maximum salary of any one replacement player must be 14.6 million or less (that is, one player could get 14.6 million and the other 2 players each get 200K, adding to 15 million)
# combined AB must be greater than (644+520+305)
minCombinedAB <- 644+520+305
minCombinedAB #1649
# min AB is 0.0
# max AB is 692.0
# Since the maximum is 692, we can work out the minimum required. Let's say two of the replacements have a score of 692. That's a combined 1384. 1649-1384=265.
# combined OBP must be greater than 0.3235294+0.4769001+0.2911765
minCombinedOBP <- 0.3235294+0.4769001+0.2911765
minCombinedOBP # 1.091606
# min OBP is 0.000
# max OBP is 1.000
# It's possible that two of the players have an OBP of 1.0000, which means that the minimum would be 0.0000. Hence, there's no point in putting any filters on for this.
# let's create a new subset with our information about salary and AB requirements
combo2001 <- subset(combo2001, salary <= 14600000)
nrow(combo2001) # we've narrowed our search to 913 players. The next step is to pick one of the variables and get the best score for that variable. Let's pick AB.
head(combo2001)
combo2001 <- subset(combo2001, AB >= 265)
nrow(combo2001) # we've narrowed our search to 913 players. The next step is to pick one of the variables and get the best score for that variable. Let's pick AB.
combo2001 <- subset(combo2001, AB >= 265)
nrow(combo2001) # we've narrowed our search to 251 players. The next step is to pick one of the variables and get the best score for that variable. Let's pick AB.
summary(combo2001)
summary(combo2001$AB)
# does our summary tell us anything useful about AB?
summary(combo2001$AB)
arrange(combo2001$AB)
# does our summary tell us anything useful about AB?
summary(combo2001$AB)
sort(combo2001$AB)
combo2001 <- subset(combo2001, AB >= 285)
combo2001 <- subset(combo2001, AB >= 285)
nrow(combo2001)
# it would be useful to take a look at salaries again.
combo2001 %>% arrange(AB)
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, salary) %>% arrange(AB)
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, salary) %>% arrange(desc(AB))
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- 0.3814714	+ 0.3139205 + 0.3234880
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- 0.3814714	+ 0.3139205 + 0.3234880
opbABTop
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 1.01888 - this is less than the requirement of 1.091606
# let's inspect the data to get an idea of the max and min salaries, AB and OBP
summary(combo2001)
# min salary is 200000
# since the total salary cap is 15 million, and the lowest salary is 200K, the maximum salary of any one replacement player must be 14.6 million or less (that is, one player could get 14.6 million and the other 2 players each get 200K, adding to 15 million)
# combined AB must be greater than (644+520+305)
minCombinedAB <- 644+520+305
minCombinedAB #1649
# min AB is 0.0
# max AB is 692.0
# Since the maximum is 692, we can work out the minimum required. Let's say two of the replacements have a score of 692. That's a combined 1384. 1649-1384=265.
# mean of combined OBP must be greater than 0.3235294+0.4769001+0.2911765
minCombinedOBP <- (0.3235294+0.4769001+0.2911765)/3
minCombinedOBP # 1.091606
# min OBP is 0.000
# max OBP is 1.000
# It's possible that two of the players have an OBP of 1.0000, which means that the minimum would be 0.0000. Hence, there's no point in putting any filters on for this.
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 0.3396266 - this is less than the requirement of 0.3638687, so we need to raise this. We have some leeway, as the top 10 players by AB all have scores that would mean the combined AB was sufficient.
#replace the lowest OBP
opbABTop2 <- (0.3814714	+ 0.3235294 + 0.3234880)/3
opbABTop2
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 0.3396266 - this is less than the requirement of 0.3638687, so we need to raise this. We have some leeway, as the top 10 players by AB all have scores that would mean the combined AB was sufficient.
#replace the lowest OBP
opbABTop2 <- (0.3814714	+ 0.3710602 + 0.3234880)/3
opbABTop2
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 0.3396266 - this is less than the requirement of 0.3638687, so we need to raise this. We have some leeway, as the top 10 players by AB all have scores that would mean the combined AB was sufficient.
#replace the lowest OBP
opbABTop2 <- (0.3814714	+ 0.3710602 + 0.3688047)/3
opbABTop2
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 0.3396266 - this is less than the requirement of 0.3638687, so we need to raise this. We have some leeway, as the top 10 players by AB all have scores that would mean the combined AB was sufficient.
#replace the lowest OBP
opbABTop2 <- (0.3814714	+ 0.3710602 + 0.3688047)/3 # this results in a mean of 0.3737788
opbABTop2 # suzukic01 + stewash01 + 0.3688047
692 + 640 + 636
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 0.3396266 - this is less than the requirement of 0.3638687, so we need to raise this. We have some leeway, as the top 10 players by AB all have scores that would mean the combined AB was sufficient.
#replace the lowest OBP
opbABTop2 <- (0.3814714	+ 0.3710602 + 0.3688047)/3 # this results in a mean of 0.3737788
opbABTop2 # suzukic01 + stewash01 + 0.3688047
#AB = 692 + 640 + 636 = 1968, so that meets the requirement
5666667 + 2183333 + 3250000
# it would be useful to take a look at salaries again.
combo2001 %>% select(playerID, AB, OBP, salary) %>% arrange(desc(AB))
# this shows that the top three players by AB would cost a combined
costABTop <- 5666667 + 4500000 + 200000
costABTop # 10,366,667 - well under 15 million, so let's see what the OBP would be
opbABTop <- (0.3814714	+ 0.3139205 + 0.3234880)/3
opbABTop # 0.3396266 - this is less than the requirement of 0.3638687, so we need to raise this. We have some leeway, as the top 10 players by AB all have scores that would mean the combined AB was sufficient.
#replace the lowest OBP
opbABTop2 <- (0.3814714	+ 0.3710602 + 0.3688047)/3 # this results in a mean of 0.3737788
opbABTop2 # suzukic01 + stewash01 + 0.3688047
#AB = 692 + 640 + 636 = 1968, so that meets the requirement
#combined salary 5666667 + 2183333 + 3250000 = 11,100,000 - so this meets the requirement
ids <- c('suzukic01' + 'stewash01' + 'aurilri01')
ids <- c('suzukic01','stewash01','aurilri01')
replacements <- subset(combo2001, playerID %in% ids)
replacements
ids <- c('suzukic01','stewash01','aurilri01')
replacements <- subset(combo2001, playerID %in% ids)
replacements
totalAB <- replacements %>% summarise(sum(AB))
meanOBP <- replacements %>% summarise(mean(OBP))
totalSalary <- replacements %>% summarise(sum(salary))
library(stringr)
str_glue("The total AB score is {totalAB}")
str_glue("The mean OBP score is {meanOBP}")
str_glue("The total salary is {totalSalary}")
ids <- c('suzukic01','stewash01','aurilri01')
replacements <- subset(combo2001, playerID %in% ids)
replacements
library(stringr)
totalAB <- replacements %>% summarise(sum(AB))
meanOBP <- replacements %>% summarise(mean(OBP))
totalSalary <- replacements %>% summarise(sum(salary))
str_glue("The total AB score is {totalAB}")
str_glue("The mean OBP score is {meanOBP}")
str_glue("The total salary is {totalSalary}")
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv')
head(df)
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ')
head(df)
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ';)
head(df)
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ';)
head(df)
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ';')
head(df)
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ';')
head(df)
summary(df)
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ';')
head(df)
summary(df)
any(is.na(df))
library(ggplot2)
library(ggthemes)
library(dplyr)
numCols <- sapply(df,is.numeric)
corData <- cor(df[numCols])
corData
install.packages(c("corrgram", "corrplot"))
library(corrgram)
install.packages("corrplot")
install.packages("corrplot")
install.packages("corrplot")
install.packages("corrgram")
library(corrgram)
install.packages('corrgram')
install.packages("corrgram")
install.packages(c("corrgram", "corrplot"))
install.packages("corrgram")
library(readr)
df <- read.csv('Machine Learning with R/student-mat.csv', sep = ';')
head(df)
summary(df)
any(is.na(df))
library(ggplot2)
library(ggthemes)
library(dplyr)
numCols <- sapply(df,is.numeric)
corData <- cor(df[numCols])
corData
library(corrgram)
install.packages("corrplot")
install.packages("corrgram")
library(corrgram)
library(corrplot)
library(corrgram)
library(corrplot)
corrplot(corData)
library(corrgram)
library(corrplot)
corrplot(corData,method='color')
corrgram(df)
corrgram(df,order=T,lower.panel = panel.pie, upper.panel = panel.bar())
corrgram(df,order=T,lower.panel = panel.pie, upper.panel = panel.shade)
corrgram(df,order=T,lower.panel = panel.pie, upper.panel = panel.shade, text.panel = panel.txt)
ggplot(df,aes(x=G3)) + geom_histogram(bins=20,alpha=0.5,fill='blue')
library(caTools)
summary(model)
# for a linear regression model
#model <- lm(y ~ x1 + x2,data)
# quicker way for a linear regression model
#model <- lm(y ~ . , data)
model <- lm(G3 ~ ., data = train)
library(caTools)
# set a seeds file of random data
set.seed(101)
# state the way you are splitting the data for the sample. arguments are a dataframe column and splitRatio (the proportion of the data you want to use for the sample)
sample <- sample.split(df$G3,SplitRatio = 0.7)
# create the training subset (i.e. here it's 0.7 of the data)
train <- subset(df, sample == TRUE)
# which means the test subset should be 0.3
test <- subset(df,sample==FALSE)
# for a linear regression model
#model <- lm(y ~ x1 + x2,data)
# quicker way for a linear regression model
#model <- lm(y ~ . , data)
model <- lm(G3 ~ ., data = train)
summary(model)
res <- residuals(model)
class(res)
res <- residuals(model)
class(res)
res <- as.data.frame(res)
res <- residuals(model)
class(res)
res <- as.data.frame(res)
ggplot(res,aes(res)) _ geom_histogram()
res <- residuals(model)
class(res)
res <- as.data.frame(res)
ggplot(res,aes(res)) + geom_histogram()
res <- residuals(model)
class(res)
res <- as.data.frame(res)
ggplot(res,aes(res)) + geom_histogram(binwidth=20)
res <- residuals(model)
class(res)
res <- as.data.frame(res)
ggplot(res,aes(res)) + geom_histogram(fill='blue')
res <- residuals(model)
class(res)
res <- as.data.frame(res)
ggplot(res,aes(res)) + geom_histogram(fill='blue', alpha=0.5)
plot(model)
G3Predictions <- predict(model, test)
G3Predictions <- predict(model, test)
results <- cbind(G3Predictions, test$G3)
colnames(results) <- c('pred','real')
results <- as.data.frame(results)
G3Predictions <- predict(model, test)
results <- cbind(G3Predictions, test$G3)
colnames(results) <- c('pred','real')
results <- as.data.frame(results)
head(results)
toZero <- function(x) {
if (x <0) {return(0)} else {return(x)}
}
toZero <- function(x) {
if (x <0) {return(0)} else {return(x)}
}
# 1. use Mean Standard Error
mse <- mean((results$real-results%pred)^2)
# 1. use Mean Standard Error
mse <- mean((results$real-results$pred)^2)
mse
# 2. Root Mean Squared Error
mse^0.5
# 3. R-squared value
SSE <- sum((results$pred-results$real)^2)
SST <- sum(mean(df$G3)-results$real)^2)
# 3. R-squared value
SSE <- sum((results$pred-results$real)^2)
SST <- sum((mean(df$G3)-results$real)^2)
R2 <- 1- SSE/SST
R2
G3Predictions <- predict(model, test)
results <- cbind(G3Predictions, test$G3)
colnames(results) <- c('pred','real')
results <- as.data.frame(results)
head(results)
min(results)
toZero <- function(x) {
if (x <0) {return(0)} else {return(x)}
}
results$pred <- sapply(results$pred,toZero)
min(results)
