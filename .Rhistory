head(Credit)
library(ISLR)
# data(Colle)
library(ISLR)
data("College")
library(ISLR)
data("College")
head(College)
library(ISLR)
df <- data("College")
head(df)
library(ISLR)
df <- data("College")
head(df)
library(ISLR)
data("College")
df <= College
head(df)
library(ISLR)
data("College")
df <- College
head(df)
library(ggplot2)
library(ggplot2)
ggplot((df, aes(x=`Room.Board`, y=`Grad.Rate`)) + geom_point()
ggplot(df, aes(x=`Room.Board`, y=`Grad.Rate`)) + geom_point()
ggplot(df, aes(x=`Room.Board`, y=`Grad.Rate`, col=Private)) + geom_point()
ggplot(df, aes(x=`F.Undergrad`, col=Private)) + geom_histogram()
ggplot(df, aes(x=`F.Undergrad`, fill=Private)) + geom_histogram()
ggplot(df, aes(x=`F.Undergrad`, fill=Private)) + geom_histogram(col='black')
ggplot(df, aes(x=`Grad.Rate`, fill=Private)) + geom_histogram(col='black')
library(dplyr)
odd <- df %>% filter(`Grad.Rate`>100)
odd
odd <- df %>% filter(`Grad.Rate`>100)
odd[,1]
odd <- df %>% filter(`Grad.Rate`>100)
odd[1,1]
odd <- df %>% filter(`Grad.Rate`>100)
odd[1,1]
odd <- df %>% filter(`Grad.Rate`>100)
odd[1,]
odd <- df %>% filter(`Grad.Rate`>100)
odd[,1]
odd <- df %>% filter(`Grad.Rate`>100)
odd <- df %>% filter(`Grad.Rate`>100)
df
odd <- df %>% filter(`Grad.Rate`>100)
df[,1]
odd <- df %>% filter(`Grad.Rate`>100)
df[1,]
odd <- df %>% filter(`Grad.Rate`>100)
df[`Grad.Rate`] > 100
odd <- df %>% filter(`Grad.Rate`>100)
df['Grad.Rate'] > 100
odd <- df %>% filter(`Grad.Rate`>100)
oddjob <- df['Grad.Rate'] > 100
odd <- df %>% filter(`Grad.Rate`>100)
oddjob <- df['Grad.Rate'] > 100
oddjob
odd <- df %>% filter(`Grad.Rate`>100)
oddjob <- (df['Grad.Rate'] > 100) == T
oddjob
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
if (df)['Grad.Rate'] > 100) {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
if (df)['Grad.Rate'] > 100) {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
if (df['Grad.Rate'] > 100) {
return(df['Grad.Rate'])
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
if (df['Grad.Rate'] > 100) {
return(df[,1])
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for col in df {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for col in df {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for col in df {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if (`Grad.Rate` > 100) {
return(row)
}
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if (row$`Grad.Rate` > 100) {
return(row)
}
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if (row[`Grad.Rate`] > 100) {
return(row)
}
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if (row['Grad.Rate'] > 100) {
return(row)
}
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if ((row['Grad.Rate'] > 100) == ) {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if ((row['Grad.Rate'] > 100) == T) {
return(row)
}
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if ((row['Grad.Rate'] > 100) = T) {
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
for (row in df) {
if ((row['Grad.Rate'] > 100) == T) {
return(row)
}
}
# odd <- df %>% filter(`Grad.Rate`>100)
# oddjob <- df['Grad.Rate'] > 100
subset(df,Grad.Rate > 100)
df['Cazenovia College','Grad.Rate'] <- 100
ggplot(df, aes(x=`Grad.Rate`, fill=Private)) + geom_histogram(col='black')
library(caTools)
# Set a random
set.seed(101)
# Split up the sample, basically randomly assigns a boolean to a new column "sample"
sample <- sample.split(df$Private, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(df, sample == TRUE)
# Testing Data
test = subset(df, sample == FALSE)
head(train)
# Set a random
set.seed(101)
# Split up the sample, basically randomly assigns a boolean to a new column "sample"
sample <- sample.split(df$Private, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(df, sample == TRUE)
# Testing Data
test = subset(df, sample == FALSE)
head(train)
head(test)
library(rpart)
privateTree <- rpart(Private ~.,method='class',data = train)
privateTree
plot(privateTree)
ggplot(privateTree)
plot(privateTree)
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
prp(privateTree)
install.packages("randomForest")
library(rpart)
library(rpart.plot)
library(randomForest)
rf.model <- randomForest(Private ~ ., data=df)
rf.model
rf.model <- randomForest(Private ~ ., data=train)
rf.model
privateTree.predictions <- predict(privateTree, test)
privateTree.predictions
privateTree.predictions <- predict(privateTree, test)
head(privateTree.predictions)
privateTree.predictions <- as.data.frame(privateTree.predictions)
# Lots of ways to do this
joiner <- function(x){
if (x>=0.5){
return('Yes')
}else{
return("No")
}
}
privateTree.predictions$Private <- sapply(privateTree.predictions$Yes,joiner)
head(privateTree.predictions)
table(privateTree.predictions$Private,test$Private)
rf.model <- randomForest(Private ~ ., data=train, importance=TRUE)
rf.model
rf.model$confusion
rf.model$importance
class(rf.model$importance)
imp <- rf.model$importance
imp[order(imp$MeanDecreaseGini)]
imp <- rf.model$importance
imp[order(imp$MeanDecreaseGini),]
imp <- rf.model$importance
imp[order(-imp$MeanDecreaseGini),]
imp <- rf.model$importance
imp[order(-imp['MeanDecreaseGini']),]
imp <- rf.model$importance
imp[order(imp['MeanDecreaseGini']),]
imp <- rf.model$importance
imp[order(imp['MeanDecreaseGini'])]
imp <- rf.model$importance
sort(imp)
p <- predict(rf.model,test)
table(p,test$Private)
install.packages("e1071")
help("svm")
help(svm)
library(ISLR)
head(iris)
library(e1071)
# model is equal to svm function(takes in the column you want to predict ~ the columns used for the prediction, the dataset)
model <- svm(Species ~ ., data = iris)
# model is equal to svm function(takes in the column you want to predict ~ the columns used for the prediction, the dataset)
model <- svm(Species ~ ., data = iris)
model
# model is equal to svm function(takes in the column you want to predict ~ the columns used for the prediction, the dataset)
model <- svm(Species ~ ., data = iris)
summary(model)
tune.results <- tune(svm,train.x = iris[,5],kernel='radial', ranges=list(cost=c(0.1,1,10), gamma=c(0.5,1,2)))
tune.results <- tune(svm,train.x = iris[1:4], train.y = iris[,5],kernel='radial', ranges=list(cost=c(0.1,1,10), gamma=c(0.5,1,2)))
tune.results <- tune(svm,train.x = iris[1:4], train.y = iris[,5],kernel='radial', ranges=list(cost=c(0.1,1,10), gamma=c(0.5,1,2)))
summary(tune.results)
tune.results <- tune(svm,train.x = iris[1:4], train.y = iris[,5],kernel='radial', ranges=list(cost=c(0.1,1,10), gamma=c(0.1,1,2)))
summary(tune.results)
tune.results <- tune(svm,train.x = iris[1:4], train.y = iris[,5],kernel='radial', ranges=list(cost=c(0.1,1.5,10), gamma=c(0.1,1,2)))
summary(tune.results)
tuned.svm <- svm(Species ~ ., data=iris, kernel='radial', cost=1.5, gamma=0.5)
tuned.svm <- svm(Species ~ ., data=iris, kernel='radial', cost=1.5, gamma=0.5)
summary(tuned.svm)
tuned.svm <- svm(Species ~ ., data=iris, kernel='radial', cost=1.5, gamma=0.1)
summary(tuned.svm)
library(ggplot2)
library(e1071)
library(readr)
loans <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/loan_data.csv')
head(loans)
str(loans)
summary(loans)
loans <- loans <- mutate(`inq.last.6mths`=factor(`inq.last.6mths`), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
library(ggplot2)
library(e1071)
library(readr)
library(dplyr)
loans <- loans <- mutate(`inq.last.6mths`=factor(`inq.last.6mths`), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
library(ggplot2)
library(e1071)
library(readr)
library(dplyr)
loans <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/loan_data.csv')
head(loans)
str(loans)
summary(loans)
loans <- loans <- mutate(`inq.last.6mths`=factor(`inq.last.6mths`), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
loans <- loans <- mutate(inq.last.6mths=factor(inq.last.6mths), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
loans <- loans <- mutate(`inq.last.6mths`=factor(`inq.last.6mths`), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
loans <- loans %>% mutate(`inq.last.6mths`=factor(`inq.last.6mths`), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
head(loans)
ggplot(loans, aes(x=fico)) + geom_histogram(aes(col=`not.fully.paid`))
ggplot(loans, aes(x=fico)) + geom_histogram(aes(fill=`not.fully.paid`), col='black')
ggplot(loans, aes(x=purpose)) + geom_bar(aes(fill=`not.fully.paid`), col='black', position='dodge')
ggplot(loans, aes(x=purpose)) + geom_bar(aes(fill=`not.fully.paid`), col='black', position='dodge') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`))
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5)
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5) + + scale_fill_manual(values = c('green','red')) + theme_bw()
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5) + scale_fill_manual(values = c('green','red')) + theme_bw()
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(alpha=0.5) + scale_fill_manual(values = c('green','red')) + theme_bw()
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5) + scale_fill_manual(values = c('green','red'))
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(alpha=0.5) + scale_fill_manual(values = c('green','red'))
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5) + scale_fill_manual(values = c('green','red'))
library(ggplot2)
library(e1071)
library(readr)
library(dplyr)
library(caTools)
set.seed(101)
spl = sample.split(loans$not.fully.paid, 0.7)
train = subset(loans, spl == TRUE)
test = subset(loans, spl == FALSE)
model <- svm(not.fully.pad ~ ., data = train)
model <- svm(not.fully.paid ~ ., data = train)
summary(model)
predicted.values <- predict(model,test[1:13])
predicted.values <- predict(model,test[1:13])
table(predicted.values,test$not.fully.paid)
tune.results <- tune(svm,train.x=not.fully.paid~., data=train,kernel='radial',
ranges=list(cost=c(1, 10), gamma=c(0.1, 0.5, 1)))
tune.results <- tune(svm,train.x=not.fully.paid~., data=train,kernel='radial',
ranges=list(cost=c(1, 10), gamma=c(0.1, 1)))
summary(tune.results)
tune.results <- tune(svm,train.x=not.fully.paid~., data=train,kernel='radial',
ranges=list(cost=c(1, 10), gamma=c(0.1, 10)))
summary(tune.results)
ggplot(loans, aes(x=fico)) + geom_histogram(aes(fill=`not.fully.paid`), col='black') + scale_fill_manual(values = c('green','red'))
ggplot(loans, aes(x=purpose)) + geom_bar(aes(fill=`not.fully.paid`), col='black', position='dodge') + scale_fill_manual(values = c('green','red')) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5) + scale_fill_manual(values = c('green','red'))
tune.results <- tune(svm,train.x=not.fully.paid~., data=train,kernel='radial',
ranges=list(cost=c(1, 10), gamma=c(0.1, 1)))
tuned.model <- svm(not.fully.paid ~ ., data = train, cost=10, gamma=0.1)
library(ggplot2)
library(e1071)
library(readr)
library(dplyr)
library(caTools)
loans <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/loan_data.csv')
head(loans)
str(loans)
summary(loans)
loans <- loans %>% mutate(`inq.last.6mths`=factor(`inq.last.6mths`), `delinq.2yrs`=factor(`delinq.2yrs`), `pub.rec`=factor(`pub.rec`), `not.fully.paid`=factor(`not.fully.paid`), `credit.policy`=factor(`credit.policy`))
head(loans)
ggplot(loans, aes(x=fico)) + geom_histogram(aes(fill=`not.fully.paid`), col='black') + scale_fill_manual(values = c('green','red'))
# I changed the colours to green and red to show that not.fully.paid=0 is the good value.
ggplot(loans, aes(x=purpose)) + geom_bar(aes(fill=`not.fully.paid`), col='black', position='dodge') + scale_fill_manual(values = c('green','red')) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(loans, aes(x=fico, y=`int.rate`)) + geom_point(aes(col=`not.fully.paid`), alpha=0.5) + scale_fill_manual(values = c('green','red'))
set.seed(101)
spl = sample.split(loans$not.fully.paid, 0.7)
train = subset(loans, spl == TRUE)
test = subset(loans, spl == FALSE)
model <- svm(not.fully.paid ~ ., data = train)
summary(model)
predicted.values <- predict(model,test[1:13])
table(predicted.values,test$not.fully.paid)
tune.results <- tune(svm,train.x=not.fully.paid~., data=train,kernel='radial',
ranges=list(cost=c(1, 10), gamma=c(0.1, 1)))
summary(tune.results)
tuned.model <- svm(not.fully.paid ~ ., data = train, cost=10, gamma=0.1)
tuned.predictions <- predict(not.fully.paid ~ ., data=train, )
tuned.predictions <- predict(tuned.model, test[1:13])
tuned.predictions <- predict(tuned.model, test[1:13])
table(tuned.predictions, test$not.fully.paid)
library(ISLR)
head(iris)
library(ggplot2)
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color=Species)) + geom_point(size=4)
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color=Species)) + geom_point(size=4, alpha=0.4)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
irisCluster <- kmeans(iris[,1:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
library(cluster)
clusplot(iris, irisCluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
library(readr)
library(ggplot2)
library(cluster)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv')
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv')
head(df1)
head(df2)
library(readr)
library(ggplot2)
library(cluster)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv')
head(df1)
library(readr)
library(ggplot2)
library(cluster)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv', sep = ";")
head(df2)
df1$Label <- "Red"
df2$Label <- "White"
head(df1)
head(df2)
library(readr)
library(ggplot2)
library(cluster)
library(dplyr)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv', sep = ";")
wine <- df1 %> full_join(df2)
wine <- df1 %>% full_join(df2)
head(wine)
library(readr)
library(ggplot2)
library(cluster)
library(dplyr)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv', sep = ";")
df1$Label <- "Red"
df2$Label <- "White"
head(df1)
head(df2)
wine <- df1 %>% full_join(df2)
head(wine)
wine <- df1 %>% full_join(df2)
head(wine)
tail(wine)
str(wine)
summary(wine)
ggplot(wines, aes(x=residual.sugar)) + geom_histogram(fill=Label, col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(fill=Label, col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(fill='Label', col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black') + scale_fill_manual(values = c('red','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black') + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 40) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 100) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 60) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 20) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=citric.acid)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=alcohol)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label)) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label), alpha=0.4) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4, stroke = 2)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4, stroke = 10)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(fill=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(color=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(fill=Label, shape=Label), col='black', alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), col='black', alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
ggplot(wine, aes(x=residual.sugar, y=volatile.acidity)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wineCluster <- kmeans(wine[,1:12], 3, nstart = 20)
wineCluster
clus.date <- wine[,1:12]
clus.data <- wine[,1:12]
head(clus.data)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 3, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 2, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
install.packages("NbClust")
install.packages("factoextra")
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss")
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss") + geom_vline(xintercept = 3, linetype = 2)
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss")
# + geom_vline(xintercept = 3, linetype = 2)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 3, nstart = 20)
wine.cluster
table(wine$Label, wine.cluster$cluster)
library(readr)
library(ggplot2)
library(cluster)
library(dplyr)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv', sep = ";")
df1$Label <- "Red"
df2$Label <- "White"
head(df1)
head(df2)
wine <- df1 %>% full_join(df2)
head(wine)
tail(wine)
str(wine)
summary(wine)
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=citric.acid)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=alcohol)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
ggplot(wine, aes(x=residual.sugar, y=volatile.acidity)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
# stop at the 12th column because we want to get rid of Label.
clus.data <- wine[,1:12]
head(clus.data)
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss")
# + geom_vline(xintercept = 3, linetype = 2)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 3, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 2, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
