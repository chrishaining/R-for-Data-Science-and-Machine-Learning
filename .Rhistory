missmap(dfTrain, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
str(dfTrain)
dfTrain <- select(dfTrain,-PassengerId,-Name,-Ticket,-Cabin)
str(dfTrain)
dfTrain$Survived <- factor(dfTrain$Survived)
dfTrain$Pclass <- factor(dfTrain$Pclass)
dfTrain$Parch <- factor(dfTrain$Parch)
dfTrain$SibSp <- factor(dfTrain$SibSp)
str(dfTrain)
logModel <- glm(formula=Survived ~ . , family = binomial(link='logit'),data = dfTrain)
summary(logModel)
library(caTools)
set.seed(101)
split = sample.split(dfTrain$Survived, SplitRatio = 0.70)
finalTrain = subset(dfTrain, split == TRUE)
finalTest = subset(dfTrain, split == FALSE)
finalLogModel <- glm(formula=Survived ~ . , family = binomial(link='logit'),data = finalTrain)
summary(finalLogModel)
fittedProbabilities <- predict(finalLogModel,newdata=finalTest,type='response')
fittedProbabilities <- predict(finalLogModel,newdata=finalTest,type='response')
fittedResults <- ifelse(fittedProbabilities > 0.5,1,0)
misClasificError <- mean(fittedResults != finalTest$Survived)
print(paste('Accuracy',1-misClasificError))
table(final.test$Survived, fitted.probabilities > 0.5)
table(finalTest$Survived, fittedProbabilities > 0.5)
confusionMatrix <- table(finalTest$Survived, fittedProbabilities > 0.5)
confusionMatrix
class(confusionMatrix)
library(readr)
adult <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/adult_sal.csv')
head(adult)
library(dplyr)
adult <- adult %>% select(-X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
help(gather)
help(pivot)
help('pivot')
help(sapply)
#help(sapply)
unemp <- function(job){
job <- as.character(job)
if (job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,unemp)
#help(sapply)
unemp <- function(job){
job <- as.character(job)
if (job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,unemp)
table(adult$type_employer)
gov <- function(job) {
job <- as.character(job)
if (job=='Local-gov' | job=='State-gov') {
return('SL-gov')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,gov)
table(adult$type_employer)
self <- function(job) {
job <- as.character(job)
if (job=='Self-emp-inc' | job=='Self-emp-not-inc') {
return('Self-emp')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,self)
table(adult$type_employer)
table(adult$marital)
marr <- function(marital) {
marital <- as.character(marital)
if (marital=='Divorced' | marital=='Separated' | marital=='Widowed') {
return('Not-married')
}
else if (marital=='Never-married') {
return('Never-married')
}
else {return(marital)}
}
adult$marital <- sapply(adult$marital,marr)
table(adult$marital)
marr <- function(marital) {
marital <- as.character(marital)
if (marital=='Divorced' | marital=='Separated' | marital=='Widowed') {
return('Not-married')
}
else if (marital=='Never-married') {
return('Never-married')
}
else {return('Married')}
}
adult$marital <- sapply(adult$marital,marr)
table(adult$marital)
library(readr)
adult <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/adult_sal.csv')
head(adult)
library(dplyr)
adult <- adult %>% select(-X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
#help(sapply)
unemp <- function(job){
job <- as.character(job)
if (job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,unemp)
table(adult$type_employer)
gov <- function(job) {
job <- as.character(job)
if (job=='Local-gov' | job=='State-gov') {
return('SL-gov')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,gov)
table(adult$type_employer)
self <- function(job) {
job <- as.character(job)
if (job=='Self-emp-inc' | job=='Self-emp-not-inc') {
return('Self-emp')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,self)
table(adult$type_employer)
table(adult$marital)
marr <- function(marital) {
marital <- as.character(marital)
if (marital=='Divorced' | marital=='Separated' | marital=='Widowed') {
return('Not-married')
}
else if (marital=='Never-married') {
return('Never-married')
}
else {return('Married')}
}
adult$marital <- sapply(adult$marital,marr)
table(adult$marital)
table(adult$country)
# ideas - Europe, North America, South America, etc. I don't actually know which continent each country goes in, but it will be easy to find out.
# first, create vectors of each continent
europe <- c('')
asia <- c('China', 'Philippines', 'Taiwan', 'Cambodia', 'India', 'Laos', 'Thailand', 'Vietnam')
americas <- c('Nicaragua', 'Puerto-Rico', 'United-States', 'Columbia', 'Ecuador', 'Guatemala', 'Honduras', 'Trinidad&Tobago', 'Peru', 'Mexico','Jamaica','Haiti','El-Salvador','Cuba', 'Canada')
other <-
# second, write a function that iterates through each item in adult$country and checks if it is in one of the vectors. If yes, reassign the value for that item to the name of the continent.
# ideas - Europe, North America, South America, etc. I don't actually know which continent each country goes in, but it will be easy to find out.
# first, create vectors of each continent
europe <- c('England', 'France', 'Holand-Netherlands','Hungary', 'Greece', 'Ireland', 'Italy', 'Poland', 'Scotland', 'Germany', 'Portugal', 'Yugoslavia')
asia <- c('China', 'Philippines', 'Taiwan', 'Cambodia', 'India', 'Laos', 'Thailand', 'Vietnam', 'Japan')
americas <- c('Dominican-Republic','Nicaragua', 'Puerto-Rico', 'United-States', 'Columbia', 'Ecuador', 'Guatemala', 'Honduras', 'Trinidad&Tobago', 'Peru', 'Mexico','Jamaica','Haiti','El-Salvador','Cuba', 'Canada')
# second, write a function that iterates through each item in adult$country and checks if it is in one of the vectors. If yes, reassign the value for that item to the name of the continent.
# ideas - Europe, North America, South America, etc. I don't actually know which continent each country goes in, but it will be easy to find out.
# first, create vectors of each continent
europe <- c('England', 'France', 'Holand-Netherlands','Hungary', 'Greece', 'Ireland', 'Italy', 'Poland', 'Scotland', 'Germany', 'Portugal', 'Yugoslavia')
asia <- c('China', 'Philippines', 'Taiwan', 'Cambodia', 'India', 'Laos', 'Thailand', 'Vietnam', 'Japan')
americas <- c('Dominican-Republic','Nicaragua', 'Puerto-Rico', 'United-States', 'Columbia', 'Ecuador', 'Guatemala', 'Honduras', 'Trinidad&Tobago', 'Peru', 'Mexico','Jamaica','Haiti','El-Salvador','Cuba', 'Canada')
# second, write a function that iterates through each item in adult$country and checks if it is in one of the vectors. If yes, reassign the value for that item to the name of the continent.
continent <- function(country) {
country <- as.character(country)
if (country %in% europe) {
return('Europe')
}
else if (country %in% asia) {
return('Asia')
}
else if (country %in% americas) {
return('Americas')
}
else {return('Other')}
}
# call the function and inspect the result
adult$country <- sapply(adult$country,continent)
table(adult$country)
library(readr)
adult <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/adult_sal.csv')
head(adult)
library(dplyr)
adult <- adult %>% select(-X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
#help(sapply)
unemp <- function(job){
job <- as.character(job)
if (job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,unemp)
table(adult$type_employer)
gov <- function(job) {
job <- as.character(job)
if (job=='Local-gov' | job=='State-gov') {
return('SL-gov')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,gov)
table(adult$type_employer)
self <- function(job) {
job <- as.character(job)
if (job=='Self-emp-inc' | job=='Self-emp-not-inc') {
return('Self-emp')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,self)
table(adult$type_employer)
table(adult$marital)
marr <- function(marital) {
marital <- as.character(marital)
if (marital=='Divorced' | marital=='Separated' | marital=='Widowed') {
return('Not-married')
}
else if (marital=='Never-married') {
return('Never-married')
}
else {return('Married')}
}
adult$marital <- sapply(adult$marital,marr)
table(adult$marital)
table(adult$country)
# ideas - Europe, North America, South America, etc. I don't actually know which continent each country goes in, but it will be easy to find out.
# first, create vectors of each continent
europe <- c('England', 'France', 'Holand-Netherlands','Hungary', 'Greece', 'Ireland', 'Italy', 'Poland', 'Scotland', 'Germany', 'Portugal', 'Yugoslavia')
asia <- c('China', 'Philippines', 'Taiwan', 'Cambodia', 'India', 'Laos', 'Thailand', 'Vietnam', 'Japan')
americas <- c('Dominican-Republic','Nicaragua', 'Puerto-Rico', 'United-States', 'Columbia', 'Ecuador', 'Guatemala', 'Honduras', 'Trinidad&Tobago', 'Peru', 'Mexico','Jamaica','Haiti','El-Salvador','Cuba', 'Canada')
# second, write a function that iterates through each item in adult$country and checks if it is in one of the vectors. If yes, reassign the value for that item to the name of the continent.
continent <- function(country) {
country <- as.character(country)
if (country %in% europe) {
return('Europe')
}
else if (country %in% asia) {
return('Asia')
}
else if (country %in% americas) {
return('Americas')
}
else {return('Other')}
}
# call the function
adult$country <- sapply(adult$country,continent)
# given that we've just put all the countries into continents, we should change the name of the column
adult <- adult %>% rename(continent=country)
table(adult$continent)
str(adult)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$continent <- sapply(adult$continent,factor)
adult$marital <- sapply(adult$marital,factor)
str(adult)
table(adult$ducation)
table(adult$education)
library(Amelia)
missmap(adult)
library(Amelia)
missmap(adult)
library(Amelia)
missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
library(Amelia)
#missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
is.na(adult)
library(Amelia)
#missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
is.na(adult)==T
library(Amelia)
#missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
adult[adult=='?'] <- NA
library(Amelia)
#missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
adult[adult=='?'] <- NA
table(adult$employer)
library(Amelia)
#missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
adult[adult=='?'] <- NA
table(adult$type_employer)
missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
mis <- missmap(adult, main='Adult Missing Data', col=c('pink', 'black'), legend=F)
nrow(mis)
mis <- missmap(adult, main='Adult Missing Data', y.labels = c(''), col=c('pink', 'black'), legend=F)
mis <- missmap(adult, main='Adult Missing Data', y.at=c(1), y.labels = c(''), col=c('pink', 'black'), legend=F)
adult <- na.omit(adult)
missmap(adult, main='Adult Missing Data', y.at=c(1), y.labels = c(''), col=c('pink', 'black'), legend=F)
str(adult)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_histogram()
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_bar()
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram()
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram(binwidth = 20)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram(binwidth = 2)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram(binwidth = 10)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram(binwidth = 100)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram(binwidth = 1)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age, fill=income)) + geom_histogram(binwidth = 1, col='black')
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_histogram(binwidth = 1, aes(fill=income) col='black')
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_histogram(binwidth = 1, aes(fill=income), col='black')
library(readr)
adult <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/adult_sal.csv')
head(adult)
library(dplyr)
adult <- adult %>% select(-X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
#help(sapply)
unemp <- function(job){
job <- as.character(job)
if (job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,unemp)
table(adult$type_employer)
gov <- function(job) {
job <- as.character(job)
if (job=='Local-gov' | job=='State-gov') {
return('SL-gov')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,gov)
table(adult$type_employer)
self <- function(job) {
job <- as.character(job)
if (job=='Self-emp-inc' | job=='Self-emp-not-inc') {
return('Self-emp')
}
else {return(job)}
}
adult$type_employer <- sapply(adult$type_employer,self)
table(adult$type_employer)
table(adult$marital)
marr <- function(marital) {
marital <- as.character(marital)
if (marital=='Divorced' | marital=='Separated' | marital=='Widowed') {
return('Not-married')
}
else if (marital=='Never-married') {
return('Never-married')
}
else {return('Married')}
}
adult$marital <- sapply(adult$marital,marr)
table(adult$marital)
table(adult$country)
# ideas - Europe, North America, South America, etc. I don't actually know which continent each country goes in, but it will be easy to find out.
# first, create vectors of each continent
europe <- c('England', 'France', 'Holand-Netherlands','Hungary', 'Greece', 'Ireland', 'Italy', 'Poland', 'Scotland', 'Germany', 'Portugal', 'Yugoslavia')
asia <- c('China', 'Philippines', 'Taiwan', 'Cambodia', 'India', 'Laos', 'Thailand', 'Vietnam', 'Japan')
americas <- c('Dominican-Republic','Nicaragua', 'Puerto-Rico', 'United-States', 'Columbia', 'Ecuador', 'Guatemala', 'Honduras', 'Trinidad&Tobago', 'Peru', 'Mexico','Jamaica','Haiti','El-Salvador','Cuba', 'Canada')
# second, write a function that iterates through each item in adult$country and checks if it is in one of the vectors. If yes, reassign the value for that item to the name of the continent.
continent <- function(country) {
country <- as.character(country)
if (country %in% europe) {
return('Europe')
}
else if (country %in% asia) {
return('Asia')
}
else if (country %in% americas) {
return('Americas')
}
else {return('Other')}
}
# call the function
adult$country <- sapply(adult$country,continent)
# given that we've just put all the countries into continents, we should change the name of the column
adult <- adult %>% rename(continent=country)
table(adult$continent)
str(adult)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$continent <- sapply(adult$continent,factor)
adult$marital <- sapply(adult$marital,factor)
str(adult)
table(adult$education)
library(Amelia)
adult[adult=='?'] <- NA
table(adult$type_employer)
missmap(adult, main='Adult Missing Data', y.at=c(1), y.labels = c(''), col=c('pink', 'black'), legend=F)
#adult <- na.omit(adult)
missmap(adult, main='Adult Missing Data', y.at=c(1), y.labels = c(''), col=c('pink', 'black'), legend=F)
str(adult)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_histogram(binwidth = 1, aes(fill=income), col='black')
adult <- na.omit(adult)
missmap(adult, main='Adult Missing Data', y.at=c(1), y.labels = c(''), col=c('pink', 'black'), legend=F)
str(adult)
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_histogram(binwidth = 1, aes(fill=income), col='black')
library(ggplot2)
library(ggthemes)
library(plotly)
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income), col='black', binwidth = 1)
ggplot(adult, aes(x=hr_per_week)) + geom_histogram()
ggplot(adult, aes(x=hr_per_week)) + geom_histogram(binwidth=1)
ggplot(adult, aes(x=hr_per_week)) + geom_histogram(binwidth=10)
ggplot(adult, aes(x=hr_per_week)) + geom_histogram(binwidth=5)
ggplot(adult, aes(x=hr_per_week)) + geom_histogram(binwidth=5, color='blue', alpha=0.5)
ggplot(adult, aes(x=continent) + geom_bar(aes(fill=income))
)
ggplot(adult, aes(x=continent)) + geom_bar(aes(fill=income))
)
ggplot(adult, aes(x=continent)) + geom_bar(aes(fill=income))
ggplot(adult, aes(x=continent)) + geom_bar(aes(fill=income)) + flip_data()
ggplot(adult, aes(x=continent)) + geom_bar(aes(fill=income)) + flip_data(adult)
ggplot(adult, aes(x=continent)) + geom_bar(aes(fill=income)) + flip_data()
ggplot(adult, aes(x=continent)) + geom_bar(aes(fill=income)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
head(adult)
library(caTools)
# Set a random see so your "random" results are the same as this notebook
set.seed(101)
# Split up the sample, basically randomly assigns a booleans to a new column "sample"
sample <- sample.split(adult$income, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(adult, sample == TRUE)
# Testing Data
test = subset(adult, sample == FALSE)
# generalized linear model
logModel <- glm(formula=income ~ . , family = binomial(link='logit'),data = train)
# generalized linear model
logModel <- glm(formula=income ~ . , family = binomial(link='logit'),data = train)
summary(logModel)
new.model <- step(logModel)
fitted.probabilities <- predict(new.model,newdata=test,type='response')
fitted.results <- ifelse(fitted.probabilities > 0.5,1,0)
class.error <- mean(fitted.results != test$income)
print(paste('Accuracy',1-class.error))
confusion.matrix <- table(test$income, fitted.probabilities > 0.5)
confusion.matrix
fitted.probabilities <- predict(model,newdata=test,type='response')
fitted.probabilities <- predict(model,newdata=test,type='response')
fitted.probabilities <- predict(model,newdata=test,type='response')
fitted.probabilities <- predict(new.model,newdata=test,type='response')
fitted.results <- ifelse(fitted.probabilities > 0.5,1,0)
class.error <- mean(fitted.results != test$income)
print(paste('Accuracy',1-class.error))
confusion.matrix <- table(test$income, fitted.probabilities > 0.5)
confusion.matrix
fitted.probabilities <- predict(logModel,newdata=test,type='response')
fitted.results <- ifelse(fitted.probabilities > 0.5,1,0)
class.error <- mean(fitted.results != test$income)
print(paste('Accuracy',1-class.error))
confusion.matrix <- table(test$income, fitted.probabilities > 0.5)
confusion.matrix
fitted.probabilities <- predict(logModel,newdata=test,type='response')
# fitted.results <- ifelse(fitted.probabilities > 0.5,1,0)
# class.error <- mean(fitted.results != test$income)
# print(paste('Accuracy',1-class.error))
confusion.matrix <- table(test$income, fitted.probabilities > 0.5)
confusion.matrix
