library(readr)
library(ggplot2)
library(cluster)
library(dplyr)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv', sep = ";")
df1$Label <- "Red"
df2$Label <- "White"
head(df1)
head(df2)
wine <- df1 %>% full_join(df2)
head(wine)
wine <- df1 %>% full_join(df2)
head(wine)
tail(wine)
str(wine)
summary(wine)
ggplot(wines, aes(x=residual.sugar)) + geom_histogram(fill=Label, col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(fill=Label, col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(fill='Label', col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black')
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black') + scale_fill_manual(values = c('red','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black') + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 40) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 100) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 60) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 20) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=citric.acid)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=alcohol)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label)) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label), alpha=0.4) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4, stroke = 2)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4, stroke = 10)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(fill=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(color=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(fill=Label, shape=Label), col='black', alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), col='black', alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4)
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
ggplot(wine, aes(x=residual.sugar, y=volatile.acidity)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wineCluster <- kmeans(wine[,1:12], 3, nstart = 20)
wineCluster
clus.date <- wine[,1:12]
clus.data <- wine[,1:12]
head(clus.data)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 3, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 2, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
clusplot(wine, wine.cluster$cluster, color=TRUE, shade=TRUE, labels=0, lines=0)
install.packages("NbClust")
install.packages("factoextra")
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss")
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss") + geom_vline(xintercept = 3, linetype = 2)
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss")
# + geom_vline(xintercept = 3, linetype = 2)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 3, nstart = 20)
wine.cluster
table(wine$Label, wine.cluster$cluster)
library(readr)
library(ggplot2)
library(cluster)
library(dplyr)
df1 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-red.csv', sep = ";")
df2 <- read.csv('Training Exercises/Machine Learning Projects/CSV files for ML Projects/winequality-white.csv', sep = ";")
df1$Label <- "Red"
df2$Label <- "White"
head(df1)
head(df2)
wine <- df1 %>% full_join(df2)
head(wine)
tail(wine)
str(wine)
summary(wine)
ggplot(wine, aes(x=residual.sugar)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=citric.acid)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=alcohol)) + geom_histogram(aes(fill=Label), col='black', bins = 50) + scale_fill_manual(values = c('#8B0000','#F6FEB1'))
ggplot(wine, aes(x=residual.sugar, y=citric.acid)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
ggplot(wine, aes(x=residual.sugar, y=volatile.acidity)) + geom_point(aes(col=Label, shape=Label), alpha=0.4) + scale_color_manual(values = c('#8B0000','#F6FEB1')) + theme_dark()
# stop at the 12th column because we want to get rid of Label.
clus.data <- wine[,1:12]
head(clus.data)
library(factoextra)
fviz_nbclust(clus.data, kmeans, method= "wss")
# + geom_vline(xintercept = 3, linetype = 2)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 3, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
set.seed(101)
# arguments for kmeans: dataset, K, number of iterations
wine.cluster <- kmeans(clus.data, 2, nstart = 20)
wine.cluster
wine.cluster$centers
table(wine$Label, wine.cluster$cluster)
install.packages("tm")
install.packages("twitteR")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("class")
install.packages("e1017")
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071)
library(e1017)
install.packages("e1017")
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071)
library(class)
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
recommendations
# recommendations
recommendations <- iconv(recommendations, 'UTF-8', 'ASCII')
recommendations
recommendations <- iconv(recommendations, 'UTF-8')
recommendations
recommendations <- iconv(recommendations, 'UTF-8')
recommendations
# recommendations <- iconv(recommendations, 'UTF-8')
recommendations
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations <- iconv(recommendations, 'UTF-8')
recommendations
recommendations <- iconv(recommendations, 'UTF-8')
recommendations
recommendations <- iconv(recommendations, 'UTF-8', 'ASCII')
recommendations
recommendations <- iconv(recommendations, 'UTF-8', 'ASCII')
recommendations
recommendations <- iconv(recommendations, 'UTF-8')
recommendations
recommendations <- iconv(recommendations, 'UTF-8')
recommendations
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations
recommendations <- iconv(recommendations, 'UTF-8', 'ASCII')
recommendations
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations
recommendations <- iconv(recommendations, 'UTF-8')
recommendations
recommendations <- iconv(recommendations, 'UTF-8')
# recommendations
recommendations.corpus <- Corpus(VectorSource(recommendations))
term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=T, stopwords = c('the', 'an', stopwords('english')), removeNumbers=T, tolower = T))
head(term.doc.matrix)
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations
recommendations <- iconv(recommendations, 'UTF-8')
# recommendations
recommendations.corpus <- Corpus(VectorSource(recommendations))
term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=T, stopwords = c('the', 'an', stopwords('english')), removeNumbers=T, tolower = T))
head(term.doc.matrix)
term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=T, stopwords = stopwords('english'), removeNumbers=T, tolower = T))
head(term.doc.matrix)
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations
recommendations <- iconv(recommendations, 'UTF-8')
# recommendations
recommendations.corpus <- Corpus(VectorSource(recommendations))
recommendations.corpus
term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=T, stopwords = stopwords('english'), removeNumbers=T, tolower = T))
# head(term.doc.matrix)
head(term.doc.matrix)
term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=TRUE, stopwords = stopwords('english'), removeNumbers=TRUE, tolower = TRUE))
head(term.doc.matrix)
term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=TRUE, stopwords = stopwords("english"), removeNumbers=TRUE, tolower = TRUE))
recommendations <- sapply(recommendations, function(x) x$getText())
recommendations <- sapply(recommendations, function(x) x$getText())
recommendations.text <- sapply(recommendations, function(x) x$getText())
recommendations.corpus <- Corpus(VectorSource(recommendations.text))
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations
# recommendations <- iconv(recommendations, 'UTF-8')
# recommendations
# recommendations <- sapply(recommendations, function(x) x$getText())
# recommendations.corpus <- Corpus(VectorSource(recommendations))
# recommendations.corpus
# term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=TRUE, stopwords = stopwords("english"), removeNumbers=TRUE, tolower = TRUE))
# head(term.doc.matrix)
word.freqs <- sort(rowSums(recommendations), decreasing=TRUE)
library(tm)
library(twitteR)
library(wordcloud)
library(RColorBrewer)
library(e1071) # is this needed?
library(class)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
# recommendations
# recommendations <- iconv(recommendations, 'UTF-8')
# recommendations
# recommendations <- sapply(recommendations, function(x) x$getText())
# recommendations.corpus <- Corpus(VectorSource(recommendations))
# recommendations.corpus
# term.doc.matrix <- TermDocumentMatrix(recommendations.corpus, control = list(removePunctuation=TRUE, stopwords = stopwords("english"), removeNumbers=TRUE, tolower = TRUE))
# head(term.doc.matrix)
# word.freqs <- sort(rowSums(recommendations), decreasing=TRUE)
# dm <- data.frame(word=names(word.freqs), freq=word.freqs)
wordcloud(recommendations, min.freq=10)
wordcloud(recommendations)
install.packages("SnowballC")
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(xml2)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(xml2)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
cloud <- rquery.wordcloud(recommendations, type='file', lang='english', excludeWords = NULL, textStemming = FALSE, colorPalette='Dark2', max.words=200 )
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(xml2)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
cloud <- rquery.wordcloud(recommendations, type='file', lang='english', excludeWords = NULL, textStemming = FALSE, colorPalette='Dark2', max.words=200 )
install.packages("XML")
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(XML)
library(readr)
cloud <- rquery.wordcloud(recommendations, type='file', lang='english', excludeWords = NULL, textStemming = FALSE, colorPalette='Dark2', max.words=200 )
install.packages("wordcloud2")
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(XML)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(RCurl)
library(XML)
library(readr)
recommendations <- read_tsv('FATFrecommendations.txt')
recommendationsCorpus <- Corpus(VectorSource(recommendations))
recommendationsCorpus <- recommendationsCorpus %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(RCurl)
library(XML)
library(readr)
library(dplyr)
recommendationsCorpus <- recommendationsCorpus %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
recommendationsCorpus <- tm_map(recommendationsCorpus, content_transformer(tolower))
recommendationsCorpus <- tm_map(recommendationsCorpus, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(recommendationsCorpus)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix), decreasing = T)
df <- data.frame(word = names(words), freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(3.5,0.25), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(6.5,0.25), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(1.5,0.25), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.5,0.25), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.5,1.25), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.5,0.15), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.5,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.0,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(3.0,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.9,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.8,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.75,0.1), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.2), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.9), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.5), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.4), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.3), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.29), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.28), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.27), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.26), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.25), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.24), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.23), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloud2(data=df, size=1.6, color='random-dark')
library(tm)
library(SnowballC)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(RCurl)
library(XML)
library(readr)
library(dplyr)
recommendations <- read_tsv('FATFrecommendations.txt')
recommendationsCorpus <- Corpus(VectorSource(recommendations))
recommendationsCorpus <- recommendationsCorpus %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
recommendationsCorpus <- tm_map(recommendationsCorpus, content_transformer(tolower))
recommendationsCorpus <- tm_map(recommendationsCorpus, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(recommendationsCorpus)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix), decreasing = T)
df <- data.frame(word = names(words), freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.23), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloud2(data=df, size=1.6, color='random-dark')
wordcloud2(data=df, size = 0.7, shape = 'pentagon')
wordcloud2(data=df, size = 0.7, shape = 'star')
install.packages("webshot")
cloud2 <- wordcloud2(data=df, size = 0.7, shape = 'star')
library(webshot)
saveWidget(cloud2, "cloud2.html")
library(htmlwidgets)
library(webshot)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html")
webshot("cloud2.html", "cloud2.png")
library(webshot)
webshot::install_phantomjs()
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html")
webshot("cloud2.html", "cloud2.png")
cloud2 <- wordcloud2(data=df, size = 0.7, shape = 'star')
library(webshot)
webshot::install_phantomjs()
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html")
webshot("cloud2.html", "cloud2.png")
library(webshot)
webshot::install_phantomjs(force = T)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html")
webshot("cloud2.html", "cloud2.png")
library(tm)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(readr)
library(dplyr)
recommendations <- read_tsv('FATFrecommendations.txt')
recommendationsCorpus <- Corpus(VectorSource(recommendations))
recommendationsCorpus <- recommendationsCorpus %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
recommendationsCorpus <- tm_map(recommendationsCorpus, content_transformer(tolower))
recommendationsCorpus <- tm_map(recommendationsCorpus, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(recommendationsCorpus)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix), decreasing = T)
df <- data.frame(word = names(words), freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 100, max.words=200, scale=c(2.7,0.23), random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloud2(data=df, size=1.6, color='random-dark')
cloud2 <- wordcloud2(data=df, size = 0.7, shape = 'star')
library(webshot)
webshot::install_phantomjs(force = T)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html")
webshot("cloud2.html", "cloud2.png")
cloud2 <- wordcloud2(data=df, size = 0.7, shape = 'star')
cloud2
library(webshot)
webshot::install_phantomjs(force = T)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html")
webshot("cloud2.html", "cloud2.png")
library(webshot)
webshot::install_phantomjs(force = T)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html", selfcontained = F)
webshot("cloud2.html", "cloud2.png")
# and in png or pdf
# webshot("tmp.html","fig_1.pdf", delay =5, vwidth = 480, vheight=480)
library(webshot)
webshot::install_phantomjs(force = T)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html", selfcontained = F)
webshot("cloud2.html", "cloud2.png", delay = 5)
# and in png or pdf
# webshot("tmp.html","fig_1.pdf", delay =5, vwidth = 480, vheight=480)
library(webshot)
webshot::install_phantomjs(force = T)
library(htmlwidgets)
saveWidget(cloud2, "cloud2.html", selfcontained = F)
webshot("cloud2.html", "cloud2.png", delay = 5, vwidth=480, vheight=480)
# and in png or pdf
# webshot("tmp.html","fig_1.pdf", delay =5, vwidth = 480, vheight=480)
