# sort characters
# sort characters with upper and lower case
# sort numbers
cv <- c(5,55,43,5,7,7,2,4,6)
sort(cv)
# sort numbers descending
sort(cv, decreasing=T)
# sort characters
# sort characters with upper and lower case
# sort numbers
cv <- c(5,55,43,5,7,7,2,4,6)
sort(cv)
# sort numbers descending
sort(cv, decreasing=T)
# sort characters
cha <- c('d', 'a', 'c', 'b')
sort(cha)
# sort characters with upper and lower case
# sort numbers
cv <- c(5,55,43,5,7,7,2,4,6)
sort(cv)
# sort numbers descending
sort(cv, decreasing=T)
# sort characters
cha <- c('d', 'a', 'c', 'b')
sort(cha)
# sort characters with upper and lower case
cHa <- c('d', 'a', 'B', 'c')
sort(cHa)
# sort numbers
cv <- c(5,55,43,5,7,7,2,4,6)
sort(cv)
# sort numbers descending
sort(cv, decreasing=T)
# sort characters
cha <- c('d', 'a', 'c', 'b')
sort(cha)
# sort characters with upper and lower case
cHa <- c('d', 'b', 'a', 'B', 'c')
sort(cHa)
rev(cv)
cv.append(cha)
cv2 <- c(1:10)
cv.append(cv2)
cv2 <- c(1:10)
append(cv, cv2)
cv2 <- c(1:10)
append(cv, cv2)
char <- "Hiya"
numb <- 4
append(numb, char)
is.array(cv2)
is.array(cv2)
is.vector(cv2)
as.list(cv2)
as.character(cv2)
blob <- sample(1:100, 1)
blob
blob <- sample(1:100, 1)
blob
blob <- sample(1:100, 1)
blob
blob <- sample(1:100, 1)
blob
blob <- sample(1:100, 1)
blob
blob <- sample(1:100, 1)
blob
multiBlob <- sample(1:100, 5)
multiBlob
blob <- sample(1:100, 1)
print(paste("blob: {blob}"))
multiBlob <- sample(1:100, 5)
multiBlob
library(stringr)
blob <- sample(1:100, 1)
str_glue("blob: {blob}"))
library(stringr)
blob <- sample(1:100, 1)
str_glue("blob: {blob}")
multiBlob <- sample(1:100, 5)
multiBlob
library(stringr)
blob <- sample(1:100, 1)
str_glue("blob: {blob}")
multiBlob <- sample(1:100, 5)
str_glue("multiBlob: {multiBlob}")
library(stringr)
blob <- sample(1:100, 1)
str_glue("blob: {blob}")
multiBlob <- sample(1:100, 5)
print("multiBlob: {multiBlob}")
library(stringr)
blob <- sample(1:100, 1)
str_glue("blob: {blob}")
multiBlob <- sample(1:100, 5)
multiBlob
#alph <- c("A", "B", "C", "D")
letters
sample(letters, 3)
sample(letters, 3)
sample(letters, 3)
sample(letters, 3)
sample(letters, 3)
sample(letters, 3)
LETTERS
sample(letters, 3)
sample(LETTERS,2)
v <- c(1:5)
v
v <- c(1:5)
addrand <- function(x) {
ran <- sample(1:100,1)
return(x+ran)
}
addrand(10)
v <- c(1:5)
addrand <- function(x) {
ran <- sample(1:100,1)
return(x+ran)
}
addrand(10)
v <- c(1:5)
addrand <- function(x) {
ran <- sample(1:100,1)
return(x+ran)
}
#addrand(10)
lapply(v,addrand)
v <- c(1:5)
addrand <- function(x) {
ran <- sample(1:100,1)
return(x+ran)
}
#addrand(10)
# apply the addrand function to every item in the vector. returns a list
lapply(v,addrand)
sapply(v,addrand)
times2 <- function(num) {
return(num*2)
}
sapply(v,times2)
times2 <- function(num) {
return(num*2)
}
vapply(v,times2)
times2 <- function(num) {
return(num*2)
}
sapply(v,times2)
v <- 1:5
sapply(v,function(num){num*2})
# create a vector of numbers
v <- 1:5
# use sapply, passing the vector and an anonymous function as arguments
sapply(v,function(num){num*2})
# create a vector of numbers
v <- 1:5
# use sapply, passing the vector and an anonymous function as arguments
sapply(v,function(num){return(num*2)})
# create a vector of numbers
v <- 1:5
# use sapply, passing the vector and an anonymous function as arguments
sapply(v,function(num){num*2})
times_three <- function(num=1) {
return(num * 3)
}
times_three()
times_three <- function(num=1) {
return(num * 3)
}
times_three()
# create a vector of numbers
v <- 1:5
# use sapply, passing the vector and an anonymous function as arguments
sapply(v,function(num){num*2})
times_three <- function(num=1) {
return(num * 3)
}
times_three()
times_three(15)
alpha <- append(letters, LETTERS)
alpha
alpha <- append(letters, LETTERS)
sort(alpha)
punct
:punct
punctuation
library(qdapRegex)
library(qdapRegex)
help("qdapRegex")
numero <- 1.2345246
round(numero, 2)
numero <- 1.2345246
round(numero, 2)
round(numero, digits=2)
text <- "Hi there, do you know who you are voting for?"
text
text <- "Hi there, do you know who you are voting for?"
grepl("voting", text)
text <- "Hi there, do you know who you are voting for?"
grepl("voting", text) # should return TRUE
grepl("pig", text) # should return FALSE
text <- "Hi there, do you know who you are voting for?"
grepl("voting", text) # should return TRUE
grepl("pig", text) # should return FALSE
grepl("do you", text) # should return TRUE
text <- "Hi there, do you know who you are voting for?"
grepl("voting", text) # should return TRUE
grepl("pig", text) # should return FALSE
grepl("do you", text) # should return TRUE
v <- c("a", "b", "c", "d")
grepl('b', v) # will return vector of TRUE and FALSE
text <- "Hi there, do you know who you are voting for?"
grepl("voting", text) # should return TRUE
grepl("pig", text) # should return FALSE
grepl("do you", text) # should return TRUE
v <- c("a", "b", "c", "d")
grepl('b', v) # will return vector of TRUE and FALSE
grep('b', v) # will return the index of 'b'
Sys.Date()
Sys.Date()
today <- Sys.Date()
class(today)
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
as.Date(myDate)
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
as.Date(myDate)
class(myDate)
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
birthDate <- "Aug-03-76"
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-$d_%y")
birthDate
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-$d-%y")
birthDate
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-%d-%y")
birthDate
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
# create a date in character form, not using normal R date structure
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-%d-%y")
birthDate
# timestamp
as.POSIXct(("11:02:03",format="%H:%M:%S"))
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
# create a date in character form, not using normal R date structure
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-%d-%y")
birthDate
# timestamp
as.POSIXct("11:02:03",format="%H:%M:%S")
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
# create a date in character form, not using normal R date structure
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-%d-%y")
birthDate
# timestamp
as.POSIXct("11:02:03",format="%H:%M:%S")
help(strptime)
Sys.Date()
today <- Sys.Date()
class(today)
myDate <- "2020-03-02"
class(myDate)
myDate <- as.Date(myDate)
class(myDate)
# create a date in character form, not using normal R date structure
birthDate <- "Aug-03-76"
birthDate <- as.Date(birthDate, format = "%b-%d-%y")
birthDate
# timestamp
as.POSIXct("11:02:03",format="%H:%M:%S")
#help(strptime)
strptime("11:02:03",format = "%H:%M:%S")
nums <- 1:100
odds_evens <- function(vec) {
for number in vec:
nums <- 1:100
odds_evens <- function(vec) {
for (number in vec) {
if number %% 2 == 0 {print("Even Number")}
nums <- 1:100
odds_evens <- function(vec) {
for (number in vec) {
if (number %% 2 == 0) {print("Even Number")}
else {print("Not Even")}
}
}
odds_evens(vec)
mat1 <- matrix(vec)
mat1
matrixChecker <- function(mat) {
if (is.matrix(mat) == TRUE) {
print("Is a Matrix")
}
else {print("Not a Matrix")}
}
mat1 <- matrix(vec)
matrixChecker <- function(mat) {
if (is.matrix(mat) == TRUE) {
print("Is a Matrix")
}
else {print("Not a Matrix")}
}
matrixChecker(vec) # expect "Not a Matrix"
#matrixChecker(mat1) # expect "Is a Matrix"
mat1 <- matrix(vec)
matrixChecker <- function(mat) {
if (is.matrix(mat) == TRUE) {
print("Is a Matrix")
}
else {print("Not a Matrix")}
}
matrixChecker(vec) # expect "Not a Matrix"
matrixChecker(mat1) # expect "Is a Matrix"
x1 <- c(3,5,6)
# highLow <- function(x) {
#
# }
sort(x1)
x1 <- c(3,5,6)
# highLow <- function(x) {
#
# }
sort(x1, decreasing = TRUE)
#Again, this exercise would be long using a conditional. I don't want to focus on conditionals, so I will use the inbuilt max function.
max(x1)
library(dplyr)
library(nycflights13)
head(nycflights13)
library(dplyr)
library(nycflights13)
head(flights)
head(filter(flights, month==11,day==3,carrier=='AA'))
slice(flights,1:10)
#
head(arrange(flights,year,month,day,air_time))
# arrange by columns
head(arrange(flights,year,month,day,arr_time))
# arrange by columns
head(arrange(flights,year,month,day,arr_time))
head(select(flights,carrier))
head(rename(flights,airline_carrier=carrier))
distinct(select(flights,carrier))
head(mutate(flights, new_col=arr_delay-dep_delay))
head(transmute(flights, new_col=arr_delay-dep_delay))
summarise(flights,avg_air_time=mean(air_time,na.rm=TRUE))
sample_n(flights,10)
sample_frac(flights,0.1)
df <- flights
head(df)
df <- flights
result <- df %>% filter(dep_time>530) %>% sample_n(size=5) %>% arrange(desc(year))
result
library(dplyr)
head(mtcars)
mtcars %>% select(mpg>20,cyl==6)
res <- mtcars %>% select(mpg>20,cyl==6)
res <- df %>% select(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20,cyl==6)
res <- df %>% filter(mpg>20)
res <- df %>% filter(cyl==6)
#res <- df %>% filter(cyl==6)
df
res <- cars %>% filter(cyl==6)
res <- cars %>% filter(cyl==6)
#res <- cars %>% filter(cyl==6)
#res
cars
#res <- carsData %>% filter(cyl==6)
#res
carsData
library(dplyr)
head(mtcars)
carsData <- mtcars
#res <- carsData %>% filter(cyl==6)
#res
carsData
res <- carsData %>% filter(cyl==6)
res
#carsData
res <- carsData %>% filter(mpg>20,cyl==6)
res
#carsData
carsData <- carsData %>% arrange(desc(cyl, wt))
carsData <- carsData %>% arrange(desc(cyl, wt))
carsData
carsData <- carsData %>% arrange(cyl, desc(wt))
carsData
carsData <- carsData %>% arrange(cyl) %>% arrange (desc(wt))
carsData
carsData %>% select(mpg,hp)
distinct(select(gear))
carsData %>% distinct(select(gear))
carsData %>% distinct(gear)
carsData %>% mutate(performance=hp/wt)
carsData %>% summarise(mean(mpg))
carsData %>% filter(cyl==6) %>% summarise(mean(hp))
library(tidyr)
library(data.table)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0,max=100)
q2 <- runif(9, min=0,max=100)
q3 <- runif(9, min=0,max=100)
q4 <- runif(9, min=0,max=100)
df <- data.frame(comp=comp,yr=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0,max=100)
q2 <- runif(9, min=0,max=100)
q3 <- runif(9, min=0,max=100)
q4 <- runif(9, min=0,max=100)
df <- data.frame(comp=comp,yr=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
df
gather(df,quarter,revenue,Qtr1:Qtr4)
# gather, with arguments: dataframe, first new column, second new column, the original columns (can be done as a slice)
gather(df,quarter,revenue,Qtr1:Qtr4)
gatheredDf %>% spread(quarter, revenue)
gatheredDf %>% spread(quarter, revenue, Qtr1:Qtr4)
gatheredDf %>% spread(quarter, revenue, Qtr1:Qtr4)
# gather, with arguments: dataframe, first new column, second new column, the original columns (can be done as a slice)
gatheredDf <- gather(df,quarter,revenue,Qtr1:Qtr4)
# gather, with arguments: dataframe, first new column, second new column, the original columns (can be done as a slice)
gatheredDf <- gather(df,quarter,revenue,Qtr1:Qtr4)
gatheredDf %>% spread(quarter, revenue, Qtr1:Qtr4)
gatheredDf %>% spread(c(quarter, revenue), Qtr1:Qtr4)
gatheredDf %>% spread(quarter, Qtr1:Qtr4)
# gather, with arguments: dataframe, first new column, second new column, the original columns (can be done as a slice)
gatheredDf <- gather(df,quarter,revenue,Qtr1:Qtr4)
gatheredDf
#gatheredDf %>% spread(quarter, Qtr1:Qtr4)
separate(gatheredDf,newCol,c('ABC','XYZ'))
separate(gatheredDf,newCol=c('ABC','XYZ'))
